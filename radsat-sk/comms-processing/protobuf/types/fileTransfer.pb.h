/* Automatically generated nanopb header */
/* Generated by nanopb-0.4.4 */

#ifndef PB_FILETRANSFER_PB_H_INCLUDED
#define PB_FILETRANSFER_PB_H_INCLUDED
#include <pb.h>

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Struct definitions */
typedef PB_BYTES_ARRAY_T(200) fileTransferPacket_data_t;
typedef struct _fileTransferPacket {
    int32_t packetType;
    int32_t packetNumber;
    fileTransferPacket_data_t data;
} fileTransferPacket;

typedef struct _fileTransferResponse {
    int32_t packetType;
    int32_t packetNumber;
    int32_t response;
} fileTransferResponse;

typedef struct _fileTransferMessage {
    pb_size_t which_message;
    union {
        fileTransferResponse FileTransferResponse;
        fileTransferPacket FileTransferPacket;
    } message;
} fileTransferMessage;


#ifdef __cplusplus
extern "C" {
#endif

/* Initializer values for message structs */
#define fileTransferMessage_init_default         {0, {fileTransferResponse_init_default}}
#define fileTransferResponse_init_default        {0, 0, 0}
#define fileTransferPacket_init_default          {0, 0, {0, {0}}}
#define fileTransferMessage_init_zero            {0, {fileTransferResponse_init_zero}}
#define fileTransferResponse_init_zero           {0, 0, 0}
#define fileTransferPacket_init_zero             {0, 0, {0, {0}}}

/* Field tags (for use in manual encoding/decoding) */
#define fileTransferPacket_packetType_tag        1
#define fileTransferPacket_packetNumber_tag      2
#define fileTransferPacket_data_tag              3
#define fileTransferResponse_packetType_tag      1
#define fileTransferResponse_packetNumber_tag    2
#define fileTransferResponse_response_tag        3
#define fileTransferMessage_FileTransferResponse_tag 1
#define fileTransferMessage_FileTransferPacket_tag 2

/* Struct field encoding specification for nanopb */
#define fileTransferMessage_FIELDLIST(X, a) \
X(a, STATIC,   ONEOF,    MESSAGE,  (message,FileTransferResponse,message.FileTransferResponse),   1) \
X(a, STATIC,   ONEOF,    MESSAGE,  (message,FileTransferPacket,message.FileTransferPacket),   2)
#define fileTransferMessage_CALLBACK NULL
#define fileTransferMessage_DEFAULT NULL
#define fileTransferMessage_message_FileTransferResponse_MSGTYPE fileTransferResponse
#define fileTransferMessage_message_FileTransferPacket_MSGTYPE fileTransferPacket

#define fileTransferResponse_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, INT32,    packetType,        1) \
X(a, STATIC,   SINGULAR, INT32,    packetNumber,      2) \
X(a, STATIC,   SINGULAR, INT32,    response,          3)
#define fileTransferResponse_CALLBACK NULL
#define fileTransferResponse_DEFAULT NULL

#define fileTransferPacket_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, INT32,    packetType,        1) \
X(a, STATIC,   SINGULAR, INT32,    packetNumber,      2) \
X(a, STATIC,   SINGULAR, BYTES,    data,              3)
#define fileTransferPacket_CALLBACK NULL
#define fileTransferPacket_DEFAULT NULL

extern const pb_msgdesc_t fileTransferMessage_msg;
extern const pb_msgdesc_t fileTransferResponse_msg;
extern const pb_msgdesc_t fileTransferPacket_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define fileTransferMessage_fields &fileTransferMessage_msg
#define fileTransferResponse_fields &fileTransferResponse_msg
#define fileTransferPacket_fields &fileTransferPacket_msg

/* Maximum encoded size of messages (where known) */
#define fileTransferMessage_size                 228
#define fileTransferResponse_size                33
#define fileTransferPacket_size                  225

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
