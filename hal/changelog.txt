Changelog for ISIS OBC HAL library

Table of contents

Changelog for:
- version 0.3.1 (04 Nov 2019)
- version 0.3.0 (11 Oct 2019)
- version 0.2.8 (06 Aug 2018)
- version 0.2.7 (02 Aug 2018)
- version 0.2.6 (25 Apr 2018)
- version 0.2.5 (12 Dec 2017)
- version 0.2.4 (11 Dec 2015)
- version 0.2.3 (13 Nov 2015)
- version 0.2.2 (22 Sep 2015)
- Version 0.2.1 (23 Jun 2015)
- Version 0.2.0 (20 Apr 2015)
- Version 0.1.9 (07 Apr 2015)
- Version 0.1.8 (02 Mar 2015)
- Version 0.1.7 (26 Feb 2015)
- Version 0.1.6 (25 Feb 2015)
- Version 0.1.5 (27 Jan 2015)
- Version 0.1.4 (22 Dec 2014)
- Version 0.1.3 (10 Dec 2014)
- Version 0.1.2 (11 Nov 2014)
- Version 0.1.1b (24 Oct 2014)
- Version 0.1.0 (15 Oct 2014)

Version 0.3.1
==============

Summary: memory allocation changes, improvements to I2Cslave, SPI, and FRAM drivers
Release date: 4th of November 2019
Prepared by: Gerard Aalbers, Alf Henrik Sauge

General changes:

* Reduced system stack space from 9 MB to 1 MB (this is only used by code not running in FreeRTOS tasks)
* Added stack space for FIQ (fast IRQ)

Specific changes:

Drivers/I2Cslave.h & I2Cslave.c

* Removed 512 byte restriction on the size of I2C slave commands

Drivers/SPI.c

* Fixed issue with calling SPI_stop on an already stopped bus
* Improved input checking

Storage/FRAM.h & FRAM.c

* Improved error handling
* Removed unnecessary packing of structures

Version 0.3.0
==============

Summary: switched to newlib, FreeRTOS and HCC configuration changes, various small fixes
Release date: 11th of October 2019
Prepared by: Gerard Aalbers, Alf Henrik Sauge

General changes:

* Switched from newlib-nano to newlib so malloc and free are now re-entrant safe. Please note that this means any project using this HAL will need to be updated, specifically the project's linker settings [adding the -lc flag and removing newlib-nano related flags like --specs=nano.specs] and main.c [replacing return 0 by exit(0), which must also not be optimized way by the compiler]. Please look at the HAL demo project as a reference.
* Enabled software timers and queue sets in FreeRTOS, also added support for a malloc failed hook
* Increased maximum number of task contexts in HCC from 8 to 16
* More strict input checking and improved error handling in peripheral drivers
* Added stack space for abort mode

Specific changes:

supervisor.c

* Fixed issue with interal buffers that could lead to misleading telemetry values being returned

Timing/Time.h

* Added functions to convert a Time struct to an epoch and vice versa

Drivers/SPI.h & SPI.c

* Replaced binary constant definitions with hexadecimal ones
* Fixed issues where the driver would affect the SPI bus that was not being started or stopped

Drivers/PWM.c

* Fixed unaligned pointer issues inside the set duty cycle functions

Version 0.2.8
==============

Summary: hardware revision split improvements
Release date: 6th of August 2018
Prepared by: Gerard Aalbers, Jonathan Ward

General changes:

* Fixed issue where iOBC hardware revision may not be respected during library build process

Specific changes:

hal/include/hal/version/version.h
* Added hardware revision string to library version information

Version 0.2.7
==============

Summary: Cleaner split between rev. B and rev. C versions of HAL, start-up script issue fixed
Release date: 2nd of August 2018
Prepared by: Gerard Aalbers, Jonathan Ward and Pieter Botma

General changes:

* There are now separate HAL libraries for the B and C hardware revisions of the iOBC
* Fixed issue with startup script not loading .ARM.exidx/tab into memory

Specific changes:

hal/include/hal/Storage/FRAM.h
* Define for maximum FRAM address has been removed and replaced by API function

Version 0.2.6
==============

Summary: Includes support for iOBC Rev C which includes larger FRAM.
Release date: 25th of April 2018
Prepared by: Gerard Aalbers, Jonathan Ward and Pieter Botma

General changes

* Increased maximum number of simultaneous open files to 20
* Decreased SD card maximum speed to 18MHz due to perceived instability in some scenarios
* Added support for iOBC Rev C which includes larger FRAM. Separate binaries are built for RevB & C. 

Specific changes

hcc/include/config/config_fat.h
*  Increased maximum number of simultaneous open files to 20

hcc/src/config/config_mdriver_atmel_mcipdc.h
* Decreased SD card maximum speed to 18MHz due to perceived instability in some scenarios

hal/include/hal/Storage/FRAM.h
* New define dictates what is the maximum size of FRAM. Backwards compatibility is preserved with if-not-defined condition

hal/lib/*
* Includes new binary library for RevB and RevC. Backwards compatibility is preserved with original binary library

Version 0.2.5
==============

Summary: Wrap-up release of several improvements and fixes
Release date: 12th of December 2017
Prepared by: Jonathan Ward, Leon Rotthier, Pieter Botma, Gerard Aalbers

General changes

* Improved initialization error handling for various drivers, related to FreeRTOS scheduler having been started
* Updated function signatures for functions without input parameters
* Several small doxygen improvements
* Small tweaks to SD card storage library
* Fixes in various drivers to ensure debug LEDs are fully available for use by customer application

Specific changes

Driver/SPI.c
* Improved initialization error handling

supervisor.c
* Fixed memory leak

Storage/FRAM.h
* Added function to check whether parts of FRAM have been write protected 

Version 0.2.4
==============

Summary: Concurrent file handle increase, I2C slave timeout improvement
Release date: 11th of December 2015
Prepared by: Jonathan Ward

General changes

* Increased the maximum number of concurrent filehandles that can simultaneously be open to 20

Specific changes

Drivers/I2Cslave.c
* Improved accuracy of the I2C timeout measurement

Version 0.2.3
==============

Summary: I2C stability improvements
Release date: 13th of November 2015
Prepared by: Jonathan Ward & Gerard Aalbers

Specific changes

Drivers/I2Cslave.c
* Improved I2C perhipheral status handling after I2C slave stress testing

Drivers/I2C.c
* Disabled interleaving of I2C master transfers since this introduced significant complexity and potential instability for very little gain
* Disabled transfer timeout for single byte reads to improve dealing with clock stretching by slaves

Timing/Time.h & Timing/Time.c
* Moved definition of Unix epoch at 01-01-2000 00:00:00 UTC to header file (this is the earliest time the system will accept)

Version 0.2.2
==============

Summary: FreeRTOS updates, interrupt based DBGU, filesystem changes
Release date: 22nd of September 2015
Prepared by: Pieter Botma

General changes

FreeRTOS
* Updated FreeRTOS from version 7.5.0 to version 7.5.3, please see http://www.freertos.org/History.txt for a detailed changelog
* Updated port of FreeRTOS. This fixes a context switching issue, which was visible as UART starvation and FRAM contention.

Specific changes

Utility/dgbu_int.h & Utility/dbgu_int.c
* Added new interrupt based method for acquiring input from debug console, which is more reliable than the polling version

FileSystem
* Changed method of selecting and initializing a specific SD card to now use f_initvolume( drvnumber, driver_init, driver_param ) in HCC API
* Maximum number of simultaneous tasks using the filesystem increased from 4 to 8

Demo/demo_sd.c
* SD demo has been updated to use new SD card selection and initialization method

Demo/demo_uart.c
* UART demo now properly tests starvation scenario

Version 0.2.1
==============

Summary: 64 MB SDRAM support, doxygen clarifications, various smaller fixes
Release date: 23rd of June 2015
Prepared by: Gerard Aalbers

Generic changes

* This release introduces support for iOBCs with 64 MB of SDRAM

* Added several clarifications to doxygen documentation (Storage/FRAM.h, supervisor.h, and AT91 - dbgu.h)

Specific changes

Demo/demo_sd.c
* Improved doxygen and code examples 

Drivers/UART.h & Drivers/UART.c
* Fixed issue with UART_setRxEnabled not working correctly for UART bus 2 
* Moved UART queue size definition to header file

Storage/FRAM.h & Storage/FRAM.c
* Fixed definition of FRAM write protect structure
* Enabled error code indicating FRAM write protect misconfiguration
* Fixed issue with last byte of FRAM was not being addressable

AT91 - pio.c
* Added checks for NULL pointers on user specified pins and pin lists

Version 0.2.0
==============

Summary: introduction of journalling filesystem, doxygen changes
Release date: 20th of April 2015
Prepared by: Gerard Aalbers & Pieter Botma

Generic changes

* This release introduces a reliable, journalling fileystem for the iOBC. This filesystem will increase the reliability of non-volatile storage on SD cards and eliminate the susceptibility of file or filesystem corruption due to unexpected power cycles during write operations. This release will likely introduce significant changes when using the SD card storage.
	- Please note that full reliability can only be achieved when using recommended SwissBit SD cards
	- The most significant changes and points of attention are:
		+ The introduction of safe and non_safe methods, most notably for opening a file. In general all operations on a safely opened file are slower.
		+ Slightly different function parameters compared to the previous filesystem
		+ Writes are not saved to disk until f_flush() or f_close() is called on that file
		+ Reduced performance when safely writing using f_flush() but standard performance when reading
		+ The mode in which a file is opened affects if multiple handles to that file are allowed
		+ The previous file system referred to volume id's as numbers (0, 1, etc), whereas the new filesystem refer to them as letters (a, b, etc)
		+ The new filesystem API closely resembles the API from <stdio.h> and care should be taken not to mix the calls and defines
	- Recommend starting points are the following files:
		+ \hal\docs\HCC FAT and SafeFAT File System User's Guide v3.50.pdf - user guide of the filesystem including API documentation
		+ \hal\hcc\include\hcc\api_fat.h - main interface file
		+ \hal\demo\src\Demo\demo_sd.c - contains demonstration code on how to use the new filesystem and its API

* Several doxygen documentation improvements and renamed directory with doxygen from html to doxygen for clarity

Specific changes

Storage\FRAM.c
* Fixed issue where calling FRAM functions would cause a reset if FRAM hadn't been initialized yet

Utility\fprintf.h & Utility\fprintf.c
* f_puts() and f_printf() functions (which use the new filesystem) can now be found here

Version 0.1.9
==============

Summary: checksum improvements, I2C slave fix
Release date: 7th of April 2015
Prepared by: Gerard Aalbers

Generic changes

* Implemented LUT-based CRC calculations with user-specified polynomials to improve performance over bitwise calculations: CRC-32 is 3x faster, CRC-16 is 6x / 7x faster, CRC-8 is 7.5x faster. The checksum demo has been updated to include this new approach and added performance comparison.

Specific changes

checksum.c & checksum.h
* Changed CRC-8 implementation to be compliant with CRC-8 CCITT

Drivers/I2Cslave.c
* Fixed incorrect reporting of amount of bytes written to slave driver

demo/main.c
* Print version information on start-up

Version 0.1.8
==============

Summary: fixed issue with UART 2 receiver interrupt
Release date: 2nd of March 2015
Prepared by: Pieter Botma

Specific changes

Drivers/UART.c
* Fixed issue where receive interrupts for UART 2 would get disabled prematurely


Version 0.1.7
==============

Summary: fixed issue with UART 2
Release date: 26th of February 2015
Prepared by: Gerard Aalbers

Specific changes

Drivers/UART.c
* Fixed issue with driver for UART 2 bus that would crash the system on context switch

Version 0.1.6
==============

Summary: dropped UART transactional model, SPI_Stop releases pins, FRAM_Stop issue fixed
Release date: 25th of February 2015
Prepared by: Gerard Aalbers & Pieter Botma

General changes

* Reorganized test files

Specific changes

Drivers/SPI.c
* Calling SPI_Stop now reconfigures the used pins of SPI bus 1 back to their power-on-reset state

Drivers/UART.h & Drivers/UART.c
* Dropped transactional model, making transmit and receive operations independent so data can be transmitted while simultaneously listening for incoming data
* Added disable / enable functionality for the receiver section of the UART peripheral

Storage/FRAM.c
* Fixed issue in FRAM_Stop causing the function not to return when being called twice in a row

Timing/WatchDogTimer.c
* Split watchdog timer functionality in a version that depends on FreeRTOS and one that does not

Version 0.1.5
==============

Summary: checksum improvements, power down both SD cards, various other small improvements
Release date: 27th of January 2015
Prepared by: Gerard Aalbers & Pieter Botma

General changes

* Fixed broken demo code after changing SPI_start function
* Removed FreeRTOS dependencies from AT91lib - affecting dbgu.c, NorFlashAmd.c, and NorFlashIntel.c

Specific changes

Timing/WatchdogTimer.h & Timing/WatchdogTimer.c
* Replaced WDT_forceKickEvery10ms with WDT_forceKickEveryNms so it is more generic (please use this function instead of WDT_kickEveryNcalls)

checksum.h & checksum.c
* Added CRC-32 calculation according to ISO 3309
* Added capability to CRC-32 and CRC-16 calculation to split up CRC calculation over larger data blocks into several smaller ones by specifying the starting remainder
* Added definitions for standard polynoms and starting remainders for both CRC-32 and CRC-16

Storage/SDCard.h & Storage/SDCard.c
* Added function to power down both SD cards at the same time

freertos_hooks.c
* New demo file to demonstrate use of FreeRTOS idle hook and overflow hook

checksumTest.h & checkstumTest.c
* Added demo code to show use of checksum module in general and split checksum calculation in particular

Version 0.1.4
============== 

Summary: added UART functionality and demo code, bug fix to SPI_Start
Release date: 22nd of December 2014
Prepared by: Gerard Aalbers & Pieter Botma

Specific changes

Demo/demo_uart.h & Demo/demo_uart.c
* Added demo code for various use cases of the UART driver

Drivers/UART.h & Drivers/UART.c
* Added function to retrieve the number of bytes received by the previous transfer
* Clarified applicability of rxtimeout parameter used in UART initialization

Drivers/SPI.h & Drivers/SPI.c
* SPI_Start now requires specification of amount of chip selects to use in order to avoid initializing GPIO pins that will not be used by the SPI perhipheral

Version 0.1.3
============== 

Summary: bug fixes to time, disk I/O, and watchdog timer
Release date: 10th of December 2014
Prepared by: Gerard Aalbers

General changes

* Added preliminary test for Time module

Specific changes

Timing/Time.c
* Fixed infinite loop in Time_setUnixEpoch when input epoch is on 31st of December of a leap year
* Fixed issue in Time_setUnixEpoch where an input epoch on 29th of February of a leapyear would result in an epoch on 1st of March

Storage/FatFS/diskio.c
* Fixed issue where certain 2 GB SD cards would report being half their size and were therefore formatted to half their storage capacity
* Fixed stability issue in low level read and write methods

Timing/WatchDogTimer.h & Timing/WatchDogTimer.c
* Added function to kick the supervisor watchdog every 10 ms

Version 0.1.2
============== 

Summary: bug fixes to PWM, single shot functionality for ADC
Release date: 11th of November 2014
Prepared by: Gerard Aalbers & Jonathan Ward

Specific changes

Drivers/PWM.c
* Fixed issue where restarting the PWM driver could lead to the wrong timer mode getting selected

AT91lib/boards/ISIS_OBC_G20/board.h
* Changed order of PWM pin definition list to match expected order in Drivers/PWM.c; this fixes an issues with incorrect PWM pins being defined as 0% duty cycle.

Drivers/ADC.h & Drivers/ADC.c
* Added single shot functionality
* Added functions to convert RAW ADC values to millivolts

Version 0.1.1b
============== 

Summary: enabled string functionality in file system
Release date: 24th of October 2014
Prepared by: Gerard Aalbers & Jonathan Ward

General changes

* Enabled the _USE_STRFUNC #define in filesystem library, making the following string-related functions available:
	- f_putc
	- f_puts
	- f_printf
	- f_gets

* The trace level was reduced to TRACE_LEVEL_INFO for the release library

Version 0.1.0 
============= 

Summary: new filesystem implementation, several improvements to drivers
Release date: 15th of October 2014
Prepared by: Gerard Aalbers & Jonathan Ward

General changes

* Release layout has changed
	* Three component directories: hal, freertos and at91. Each has an include (containing headers) and a lib (containing the release and debug builds) directory. At91 and freertos have an extra src directory, containing the full sources used to build the binaries.
	* Demo directory containing the demo project
	* Docs directory containing the documentation for the HAL library

* New implementation for filesystem for SD-cards using standard filesystem functions
	* Low level SD card interfacing hidden so high level code only needs to use filesystem functions and not worry about media specific implementations
		- Only need to include Storage/FatFS/ff.h
		- For same functionality different functions will have to be called, for example to initialize the SD card and the filesystem:
			+ Old: FS_start(card0)
			+ New: f_mount((BYTE)0, &fs) with fs of type FATFS;
	* Updated SD card test code to use the new implementation

Specific changes

Drivers/I2C.c
* Fixed bug in I2C master driver that could lead to a task using the I2C master driver to never get rescheduled

supervisor.h
* Updated header file definitions for readability

Timing/Time.c
* Fixed several issues in supporting functions which lead to Time_setUnixEpoch function sometimes failing to set the time when a correct epoch was provided

AT91lib/peripherals/twi/twi_at91.c
* Reduced unnecessarily long wait times in initialization of I2C slave driver (this affects the initialization function in Drivers/I2Cslave.c)

Drivers/UART.c & Drivers/UART.h
* Implemented a time-out mechanism for UART data reception