
/*
 * isis_eps.h
 *
 * AUTOGENERATED CODE
 * Please do not perform manual edits
 */

#ifndef ISIS_EPS_H_
#define ISIS_EPS_H_

#include <stdint.h>

/* CONFIG */

#define ISIS_EPS_WRITE_READ_DELAY 10

/* ENUMS */

typedef enum isis_eps__error_t
{
	isis_eps__error__none = 0,
	isis_eps__error__i2c = 1,
	isis_eps__error__param = 2,
	isis_eps__error__malloc = 3,
	isis_eps__error__reinit = 4,
}
isis_eps__error_t;

/*!
 * ???
 */
typedef enum __attribute__ ((__packed__)) isis_eps__imeps_channel_t
{
	isis_eps__imeps_channel__channel_16v_perm = 0,
	isis_eps__imeps_channel__channel_16v_sw1 = 1,
	isis_eps__imeps_channel__channel_16v_sw2 = 2,
	isis_eps__imeps_channel__channel_16v_sw3 = 3,
	isis_eps__imeps_channel__channel_5v_perm = 4,
	isis_eps__imeps_channel__channel_5v_sw1 = 5,
	isis_eps__imeps_channel__channel_5v_sw2 = 6,
	isis_eps__imeps_channel__channel_5v_sw3 = 7,
	isis_eps__imeps_channel__channel_3v3_perm = 8,
	isis_eps__imeps_channel__channel_3v3_sw1 = 9,
	isis_eps__imeps_channel__channel_3v3_sw2 = 10,
	isis_eps__imeps_channel__channel_3v3_sw3 = 11,
} isis_eps__imeps_channel_t;

/* STRUCTS */

/*!
 *  ISIS_EPS instance structure
 *  */
typedef struct
{
	uint8_t i2cAddr; /*!< I2C address used for this instance */
}
ISIS_EPS_t;

/*!
 * Union for storing the parameters for struct ReplyHeader.
 */
typedef union __attribute__ ((__packed__)) _isis_eps__replyheader_t
{
	unsigned char raw[5];
	struct __attribute__ ((__packed__))	{
		uint8_t stid; /*!< "See \""System Type Identifier (STID)\"" (page 22)" */
		uint8_t ivid; /*!< "See \""Interface Version Identifier (IVID)\"" (page 23)" */
		uint8_t rc; /*!< "See \""Board Identifier (BID)\"" (page 24)" */
		uint8_t bid; /*!< Response code as stated in the header (inside parenthesis). */
		uint8_t cmderr : 4; /*!< "See \""Response Status Information (STAT)\"" (page 25)" */
		uint8_t stat : 4; /*!< "See \""Response Status Information (STAT)\"" (page 25)" */
	} fields;	
} isis_eps__replyheader_t;	

/*!
 * Union for storing the parameters for struct VIPDraw.
 */
typedef union __attribute__ ((__packed__)) _isis_eps__vipdraw_t
{
	unsigned char raw[6];
	struct __attribute__ ((__packed__))	{
		int16_t volt; /*!<  */
		int16_t current; /*!<  */
		int16_t power; /*!<  */
	} fields;	
} isis_eps__vipdraw_t;	

/*!
 * Union for storing the parameters for struct VIPDeng.
 */
typedef union __attribute__ ((__packed__)) _isis_eps__vipdeng_t
{
	unsigned char raw[6];
	struct __attribute__ ((__packed__))	{
		int16_t volt; /*!<  */
		int16_t current; /*!<  */
		int16_t power; /*!<  */
	} fields;	
} isis_eps__vipdeng_t;	

/*!
 * Union for storing the parameters for struct CCSDraw.
 */
typedef union __attribute__ ((__packed__)) _isis_eps__ccsdraw_t
{
	unsigned char raw[8];
	struct __attribute__ ((__packed__))	{
		uint16_t volt_in_mppt; /*!<  */
		uint16_t curr_in_mppt; /*!<  */
		uint16_t volt_out_mppt; /*!<  */
		uint16_t curr_out_mppt; /*!<  */
	} fields;	
} isis_eps__ccsdraw_t;	

/*!
 * Union for storing the parameters for struct CCSDeng.
 */
typedef union __attribute__ ((__packed__)) _isis_eps__ccsdeng_t
{
	unsigned char raw[8];
	struct __attribute__ ((__packed__))	{
		int16_t volt_in_mppt; /*!<  */
		int16_t curr_in_mppt; /*!<  */
		int16_t volt_out_mppt; /*!<  */
		int16_t curr_out_mppt; /*!<  */
	} fields;	
} isis_eps__ccsdeng_t;	


/*!
 * Union for storing the parameters sent by Reset TmTc.
 */
typedef union __attribute__ ((__packed__)) _isis_eps__reset__to_t
{
	unsigned char raw[1];
	struct __attribute__ ((__packed__))	{
		uint8_t rst_key; /*!< Reset key. The value of this parameter needs to be set to 0xA6 for the command to be accepted. Any other value will cause the command to be rejected. */
	} fields;	
} isis_eps__reset__to_t;	

/*!
 * Union for storing the parameters received by Reset TmTc.
 */
typedef union __attribute__ ((__packed__)) _isis_eps__reset__from_t 
{
	unsigned char raw[5];
	struct __attribute__ ((__packed__))
	{
		isis_eps__replyheader_t reply_header; /*!<  */
	} fields;
} isis_eps__reset__from_t;
	
/*!
 * Union for storing the parameters received by Nop Tm.
 */
typedef union __attribute__ ((__packed__)) _isis_eps__nop__from_t 
{
	unsigned char raw[5];
	struct __attribute__ ((__packed__))
	{
		isis_eps__replyheader_t reply_header; /*!<  */
	} fields;
} isis_eps__nop__from_t;
	
/*!
 * Union for storing the parameters received by Cancel Tm.
 */
typedef union __attribute__ ((__packed__)) _isis_eps__cancel__from_t 
{
	unsigned char raw[5];
	struct __attribute__ ((__packed__))
	{
		isis_eps__replyheader_t reply_header; /*!<  */
	} fields;
} isis_eps__cancel__from_t;
	
/*!
 * Union for storing the parameters received by Watchdog Tm.
 */
typedef union __attribute__ ((__packed__)) _isis_eps__watchdog__from_t 
{
	unsigned char raw[5];
	struct __attribute__ ((__packed__))
	{
		isis_eps__replyheader_t reply_header; /*!<  */
	} fields;
} isis_eps__watchdog__from_t;
	
/*!
 * Union for storing the parameters sent by OutputBusGroupOn TmTc.
 */
typedef union __attribute__ ((__packed__)) _isis_eps__outputbusgroupon__to_t
{
	unsigned char raw[2];
	struct __attribute__ ((__packed__))	{
		uint16_t obc_bf; /*!< Bitflag field indicating which output bus channels to turn-on. */
	} fields;	
} isis_eps__outputbusgroupon__to_t;	

/*!
 * Union for storing the parameters received by OutputBusGroupOn TmTc.
 */
typedef union __attribute__ ((__packed__)) _isis_eps__outputbusgroupon__from_t 
{
	unsigned char raw[5];
	struct __attribute__ ((__packed__))
	{
		isis_eps__replyheader_t reply_header; /*!<  */
	} fields;
} isis_eps__outputbusgroupon__from_t;
	
/*!
 * Union for storing the parameters sent by OutputBusGroupOff TmTc.
 */
typedef union __attribute__ ((__packed__)) _isis_eps__outputbusgroupoff__to_t
{
	unsigned char raw[2];
	struct __attribute__ ((__packed__))	{
		uint16_t obc_bf; /*!< Bitflag field indicating which output bus channels to turn-off. */
	} fields;	
} isis_eps__outputbusgroupoff__to_t;	

/*!
 * Union for storing the parameters received by OutputBusGroupOff TmTc.
 */
typedef union __attribute__ ((__packed__)) _isis_eps__outputbusgroupoff__from_t 
{
	unsigned char raw[5];
	struct __attribute__ ((__packed__))
	{
		isis_eps__replyheader_t reply_header; /*!<  */
	} fields;
} isis_eps__outputbusgroupoff__from_t;
	
/*!
 * Union for storing the parameters sent by OutputBusGroupState TmTc.
 */
typedef union __attribute__ ((__packed__)) _isis_eps__outputbusgroupstate__to_t
{
	unsigned char raw[2];
	struct __attribute__ ((__packed__))	{
		uint16_t obc_bf; /*!< Bitflag field indicating the required output bus channel on-state. */
	} fields;	
} isis_eps__outputbusgroupstate__to_t;	

/*!
 * Union for storing the parameters received by OutputBusGroupState TmTc.
 */
typedef union __attribute__ ((__packed__)) _isis_eps__outputbusgroupstate__from_t 
{
	unsigned char raw[5];
	struct __attribute__ ((__packed__))
	{
		isis_eps__replyheader_t reply_header; /*!<  */
	} fields;
} isis_eps__outputbusgroupstate__from_t;
	
/*!
 * Union for storing the parameters sent by OutputBusChannelOn TmTc.
 */
typedef union __attribute__ ((__packed__)) _isis_eps__outputbuschannelon__to_t
{
	unsigned char raw[1];
	struct __attribute__ ((__packed__))	{
		isis_eps__imeps_channel_t obc_idx; /*!< Bus channel index of the channel to turn on Trying to switch a permanent bus channels will be ignored. An index corresponding to a nonexistent bus channel will be rejected. */
	} fields;	
} isis_eps__outputbuschannelon__to_t;	

/*!
 * Union for storing the parameters received by OutputBusChannelOn TmTc.
 */
typedef union __attribute__ ((__packed__)) _isis_eps__outputbuschannelon__from_t 
{
	unsigned char raw[5];
	struct __attribute__ ((__packed__))
	{
		isis_eps__replyheader_t reply_header; /*!<  */
	} fields;
} isis_eps__outputbuschannelon__from_t;
	
/*!
 * Union for storing the parameters sent by OutputBusChannelOff TmTc.
 */
typedef union __attribute__ ((__packed__)) _isis_eps__outputbuschanneloff__to_t
{
	unsigned char raw[1];
	struct __attribute__ ((__packed__))	{
		isis_eps__imeps_channel_t obc_idx; /*!< Bus channel index of the channel to turn off. Trying to switch a permanent bus channels will be ignored. An index corresponding to a nonexistent bus channel will be rejected. */
	} fields;	
} isis_eps__outputbuschanneloff__to_t;	

/*!
 * Union for storing the parameters received by OutputBusChannelOff TmTc.
 */
typedef union __attribute__ ((__packed__)) _isis_eps__outputbuschanneloff__from_t 
{
	unsigned char raw[5];
	struct __attribute__ ((__packed__))
	{
		isis_eps__replyheader_t reply_header; /*!<  */
	} fields;
} isis_eps__outputbuschanneloff__from_t;
	
/*!
 * Union for storing the parameters received by SwitchToNominal Tm.
 */
typedef union __attribute__ ((__packed__)) _isis_eps__switchtonominal__from_t 
{
	unsigned char raw[5];
	struct __attribute__ ((__packed__))
	{
		isis_eps__replyheader_t reply_header; /*!<  */
	} fields;
} isis_eps__switchtonominal__from_t;
	
/*!
 * Union for storing the parameters received by SwitchToSafety Tm.
 */
typedef union __attribute__ ((__packed__)) _isis_eps__switchtosafety__from_t 
{
	unsigned char raw[5];
	struct __attribute__ ((__packed__))
	{
		isis_eps__replyheader_t reply_header; /*!<  */
	} fields;
} isis_eps__switchtosafety__from_t;
	
/*!
 * Union for storing the parameters received by GetSystemStatus Tm.
 */
typedef union __attribute__ ((__packed__)) _isis_eps__getsystemstatus__from_t 
{
	unsigned char raw[26];
	struct __attribute__ ((__packed__))
	{
		isis_eps__replyheader_t reply_header; /*!<  */
		uint8_t mode; /*!< Indicates the current mode of the system. */
		uint8_t conf; /*!< Read/write configuration parameters have been changed by the EPS master since the last parameters load/save operation */
		uint8_t reset_cause; /*!< Cause of last reset. */
		uint32_t uptime; /*!<  */
		uint16_t error; /*!<  */
		uint16_t rc_cnt_pwron; /*!<  */
		uint16_t rc_cnt_wdg; /*!<  */
		uint16_t rc_cnt_cmd; /*!<  */
		uint16_t rc_cnt_pweron_mcu; /*!<  */
		uint16_t rc_cnt_emlopo; /*!<  */
		uint16_t prevcmd_elapsed; /*!<  */
	} fields;
} isis_eps__getsystemstatus__from_t;
	
/*!
 * Union for storing the parameters received by GetOvercurrentFaultState Tm.
 */
typedef union __attribute__ ((__packed__)) _isis_eps__getovercurrentfaultstate__from_t 
{
	unsigned char raw[42];
	struct __attribute__ ((__packed__))
	{
		isis_eps__replyheader_t reply_header; /*!<  */
		uint8_t reserved; /*!<  */
		uint16_t stat_ob_on; /*!<  */
		uint16_t stat_ob_ocf; /*!<  */
		uint16_t ocf_cnt_obc00; /*!<  */
		uint16_t ocf_cnt_obc01; /*!<  */
		uint16_t ocf_cnt_obc02; /*!<  */
		uint16_t ocf_cnt_obc03; /*!<  */
		uint16_t ocf_cnt_obc04; /*!<  */
		uint16_t ocf_cnt_obc05; /*!<  */
		uint16_t ocf_cnt_obc06; /*!<  */
		uint16_t ocf_cnt_obc07; /*!<  */
		uint16_t ocf_cnt_obc08; /*!<  */
		uint16_t ocf_cnt_obc09; /*!<  */
		uint16_t ocf_cnt_obc10; /*!<  */
		uint16_t ocf_cnt_obc11; /*!<  */
		uint16_t ocf_cnt_obc12; /*!<  */
		uint16_t ocf_cnt_obc13; /*!<  */
		uint16_t ocf_cnt_obc14; /*!<  */
		uint16_t ocf_cnt_obc15; /*!<  */
	} fields;
} isis_eps__getovercurrentfaultstate__from_t;
	
/*!
 * Union for storing the parameters sent by GetParameter TmTc.
 */
typedef union __attribute__ ((__packed__)) _isis_eps__getparameter__to_t
{
	unsigned char raw[2];
	struct __attribute__ ((__packed__))	{
		uint16_t par_id; /*!< parameter id of the parameter to get */
	} fields;	
} isis_eps__getparameter__to_t;	

/*!
 * Union for storing the parameters received by GetParameter TmTc.
 */
typedef union __attribute__ ((__packed__)) _isis_eps__getparameter__from_t 
{
	unsigned char raw[16];
	struct __attribute__ ((__packed__))
	{
		isis_eps__replyheader_t reply_header; /*!<  */
		uint8_t reserved; /*!<  */
		uint16_t par_id; /*!< parameter id of the parameter to get */
		uint8_t par_val[8]; /*!< parameter value encompassing n bytes. The length depends on the parameter type. */
	} fields;
} isis_eps__getparameter__from_t;
	
/*!
 * Union for storing the parameters sent by SetParameter TmTc.
 */
typedef union __attribute__ ((__packed__)) _isis_eps__setparameter__to_t
{
	unsigned char raw[10];
	struct __attribute__ ((__packed__))	{
		uint16_t par_id; /*!< parameter id of the parameter to get */
		uint8_t par_val[8]; /*!< new parameter value encompassing n bytes. The length depends on the parameter type. */
	} fields;	
} isis_eps__setparameter__to_t;	

/*!
 * Union for storing the parameters received by SetParameter TmTc.
 */
typedef union __attribute__ ((__packed__)) _isis_eps__setparameter__from_t 
{
	unsigned char raw[16];
	struct __attribute__ ((__packed__))
	{
		isis_eps__replyheader_t reply_header; /*!<  */
		uint8_t reserved; /*!<  */
		uint16_t par_id; /*!< parameter id of the parameter to get */
		uint8_t par_val[8]; /*!< parameter value encompassing n bytes. The length depends on the parameter type. */
	} fields;
} isis_eps__setparameter__from_t;
	
/*!
 * Union for storing the parameters sent by ResetParameter TmTc.
 */
typedef union __attribute__ ((__packed__)) _isis_eps__resetparameter__to_t
{
	unsigned char raw[2];
	struct __attribute__ ((__packed__))	{
		uint16_t par_id; /*!< parameter id of the parameter to get */
	} fields;	
} isis_eps__resetparameter__to_t;	

/*!
 * Union for storing the parameters received by ResetParameter TmTc.
 */
typedef union __attribute__ ((__packed__)) _isis_eps__resetparameter__from_t 
{
	unsigned char raw[16];
	struct __attribute__ ((__packed__))
	{
		isis_eps__replyheader_t reply_header; /*!<  */
		uint8_t reserved; /*!<  */
		uint16_t par_id; /*!< parameter id of the parameter to get */
		uint8_t par_val[8]; /*!< parameter value encompassing n bytes. The length depends on the parameter type. */
	} fields;
} isis_eps__resetparameter__from_t;
	
/*!
 * Union for storing the parameters sent by ResetAll TmTc.
 */
typedef union __attribute__ ((__packed__)) _isis_eps__resetall__to_t
{
	unsigned char raw[1];
	struct __attribute__ ((__packed__))	{
		uint8_t conf_key; /*!< Configuration key: 0xA8. Any other value causes the reset command to be rejected with a parameter error. The reset will not be performed in that case. */
	} fields;	
} isis_eps__resetall__to_t;	

/*!
 * Union for storing the parameters received by ResetAll TmTc.
 */
typedef union __attribute__ ((__packed__)) _isis_eps__resetall__from_t 
{
	unsigned char raw[5];
	struct __attribute__ ((__packed__))
	{
		isis_eps__replyheader_t reply_header; /*!<  */
	} fields;
} isis_eps__resetall__from_t;
	
/*!
 * Union for storing the parameters sent by LoadAll TmTc.
 */
typedef union __attribute__ ((__packed__)) _isis_eps__loadall__to_t
{
	unsigned char raw[1];
	struct __attribute__ ((__packed__))	{
		uint8_t conf_key; /*!< Configuration key: 0xA8. Any other value causes the reset command to be rejected with a parameter error. The reset will not be performed in that case. */
	} fields;	
} isis_eps__loadall__to_t;	

/*!
 * Union for storing the parameters received by LoadAll TmTc.
 */
typedef union __attribute__ ((__packed__)) _isis_eps__loadall__from_t 
{
	unsigned char raw[5];
	struct __attribute__ ((__packed__))
	{
		isis_eps__replyheader_t reply_header; /*!<  */
	} fields;
} isis_eps__loadall__from_t;
	
/*!
 * Union for storing the parameters sent by SaveAll TmTc.
 */
typedef union __attribute__ ((__packed__)) _isis_eps__saveall__to_t
{
	unsigned char raw[3];
	struct __attribute__ ((__packed__))	{
		uint8_t conf_key; /*!< Configuration key: 0xA7. Any other value causes the save command to be rejected with a parameter error. The save will not be performed in that case. */
		uint16_t checksum; /*!< To force save this value can be set to 0. The save will then proceed without performing CRC verification. */
	} fields;	
} isis_eps__saveall__to_t;	

/*!
 * Union for storing the parameters received by SaveAll TmTc.
 */
typedef union __attribute__ ((__packed__)) _isis_eps__saveall__from_t 
{
	unsigned char raw[5];
	struct __attribute__ ((__packed__))
	{
		isis_eps__replyheader_t reply_header; /*!<  */
	} fields;
} isis_eps__saveall__from_t;
	
/*!
 * Union for storing the parameters received by GetHousekeepingRaw Tm.
 */
typedef union __attribute__ ((__packed__)) _isis_eps__gethousekeepingraw__from_t 
{
	unsigned char raw[116];
	struct __attribute__ ((__packed__))
	{
		isis_eps__replyheader_t reply_header; /*!< "See \""System Type Identifier (STID)\"" (page 22)" */
		uint8_t reserved; /*!< reserved */
		uint16_t volt_brdsup; /*!< Voltage of internal board supply in raw form */
		uint16_t temp; /*!< Measured temperature provided by a sensor internal to the MCU in raw form */
		isis_eps__vipdraw_t dist_input; /*!< Input V, I and P data taken at the input of the distribution part of the unit in raw form. Negative values indicate output flow. */
		isis_eps__vipdraw_t batt_input; /*!< Input V, I and P data taken at the input of the battery part of the unit in raw form. Negative values indicate output flow. */
		uint16_t stat_obc_on; /*!< Bitflag field indicating channel-on status for the output bus channels. */
		uint16_t stat_obc_ocf; /*!< Bitflag field indicating overcurrent latch-off fault status for the output bus channels. */
		uint16_t bat_stat; /*!< Bitflag field indicating BP board */
		uint16_t temp2; /*!< 2 and 4 cell battery pack: Battery pack temperature in between the center battery cells. */
		uint16_t temp3; /*!< 2 cell battery pack: not used 4 cell battery pack: Battery pack temperature on the front of the battery pack. */
		uint16_t volt_vd0; /*!< Voltage of voltage domain 0 in raw form */
		uint16_t volt_vd1; /*!< Voltage of voltage domain 1 in raw form */
		uint16_t volt_vd2; /*!< Voltage of voltage domain 2 in raw form */
		isis_eps__vipdraw_t vip_obc00; /*!< Output V, I and P of output bus channel in raw form */
		isis_eps__vipdraw_t vip_obc01; /*!< Output V, I and P of output bus channel in raw form */
		isis_eps__vipdraw_t vip_obc02; /*!< Output V, I and P of output bus channel in raw form */
		isis_eps__vipdraw_t vip_obc03; /*!< Output V, I and P of output bus channel in raw form */
		isis_eps__vipdraw_t vip_obc04; /*!< Output V, I and P of output bus channel in raw form */
		isis_eps__vipdraw_t vip_obc05; /*!< Output V, I and P of output bus channel in raw form */
		isis_eps__vipdraw_t vip_obc06; /*!< Output V, I and P of output bus channel in raw form */
		isis_eps__vipdraw_t vip_obc07; /*!< Output V, I and P of output bus channel in raw form */
		isis_eps__vipdraw_t vip_obc08; /*!< Output V, I and P of output bus channel in raw form */
		isis_eps__ccsdraw_t cc1; /*!< Data on conditioning chain in raw form. */
		isis_eps__ccsdraw_t cc2; /*!< Data on conditioning chain in raw form. */
		isis_eps__ccsdraw_t cc3; /*!< Data on conditioning chain in raw form. */
	} fields;
} isis_eps__gethousekeepingraw__from_t;
	
/*!
 * Union for storing the parameters received by GetHousekeepingRawIncDB Tm.
 */
typedef union __attribute__ ((__packed__)) _isis_eps__gethousekeepingrawincdb__from_t 
{
	unsigned char raw[174];
	struct __attribute__ ((__packed__))
	{
		isis_eps__replyheader_t reply_header; /*!< "See \""System Type Identifier (STID)\"" (page 22)" */
		uint8_t reserved; /*!< reserved */
		uint16_t volt_brdsup; /*!< Voltage of internal board supply in raw form */
		uint16_t temp; /*!< Measured temperature provided by a sensor internal to the MCU in raw form */
		isis_eps__vipdraw_t dist_input; /*!< Input V, I and P data taken at the input of the distribution part of the unit in raw form. Negative values indicate output flow. */
		isis_eps__vipdraw_t batt_input; /*!< Input V, I and P data taken at the input of the battery part of the unit in raw form. Negative values indicate output flow. */
		uint16_t stat_obc_on; /*!< Bitflag field indicating channel-on status for the output bus channels. */
		uint16_t stat_obc_ocf; /*!< Bitflag field indicating overcurrent latch-off fault status for the output bus channels. */
		uint16_t bat_stat; /*!< Bitflag field indicating BP board */
		uint16_t temp2; /*!< 2 and 4 cell battery pack: Battery pack temperature in between the center battery cells. */
		uint16_t temp3; /*!< 2 cell battery pack: not used 4 cell battery pack: Battery pack temperature on the front of the battery pack. */
		uint16_t volt_vd0; /*!< Voltage of voltage domain 0 in raw form */
		uint16_t volt_vd1; /*!< Voltage of voltage domain 1 in raw form */
		uint16_t volt_vd2; /*!< Voltage of voltage domain 2 in raw form */
		isis_eps__vipdraw_t vip_obc00; /*!< Output V, I and P of output bus channel in raw form */
		isis_eps__vipdraw_t vip_obc01; /*!< Output V, I and P of output bus channel in raw form */
		isis_eps__vipdraw_t vip_obc02; /*!< Output V, I and P of output bus channel in raw form */
		isis_eps__vipdraw_t vip_obc03; /*!< Output V, I and P of output bus channel in raw form */
		isis_eps__vipdraw_t vip_obc04; /*!< Output V, I and P of output bus channel in raw form */
		isis_eps__vipdraw_t vip_obc05; /*!< Output V, I and P of output bus channel in raw form */
		isis_eps__vipdraw_t vip_obc06; /*!< Output V, I and P of output bus channel in raw form */
		isis_eps__vipdraw_t vip_obc07; /*!< Output V, I and P of output bus channel in raw form */
		isis_eps__vipdraw_t vip_obc08; /*!< Output V, I and P of output bus channel in raw form */
		isis_eps__ccsdraw_t cc1; /*!< Data on conditioning chain in raw form. */
		isis_eps__ccsdraw_t cc2; /*!< Data on conditioning chain in raw form. */
		isis_eps__ccsdraw_t cc3; /*!< Data on conditioning chain in raw form. */
		isis_eps__vipdraw_t vip_obc09; /*!< Output V, I and P of output bus channel in raw form */
		isis_eps__vipdraw_t vip_obc10; /*!< Output V, I and P of output bus channel in raw form */
		isis_eps__vipdraw_t vip_obc11; /*!< Output V, I and P of output bus channel in raw form */
		isis_eps__vipdraw_t vip_obc12; /*!< Output V, I and P of output bus channel in raw form */
		isis_eps__vipdraw_t vip_obc13; /*!< Output V, I and P of output bus channel in raw form */
		isis_eps__vipdraw_t vip_obc14; /*!< Output V, I and P of output bus channel in raw form */
		isis_eps__vipdraw_t vip_obc15; /*!< Output V, I and P of output bus channel in raw form */
		isis_eps__ccsdraw_t cc4; /*!< Data on conditioning chain in raw form. */
		isis_eps__ccsdraw_t cc5; /*!< Data on conditioning chain in raw form. */
	} fields;
} isis_eps__gethousekeepingrawincdb__from_t;
	
/*!
 * Union for storing the parameters received by GetHousekeepingEng Tm.
 */
typedef union __attribute__ ((__packed__)) _isis_eps__gethousekeepingeng__from_t 
{
	unsigned char raw[116];
	struct __attribute__ ((__packed__))
	{
		isis_eps__replyheader_t reply_header; /*!< "See \""System Type Identifier (STID)\"" (page 22)" */
		uint8_t reserved; /*!< reserved */
		int16_t volt_brdsup; /*!< Voltage of internal board supply in raw form */
		int16_t temp; /*!< Measured temperature provided by a sensor internal to the MCU in raw form */
		isis_eps__vipdeng_t dist_input; /*!< Input V, I and P data taken at the input of the distribution part of the unit in raw form. Negative values indicate output flow. */
		isis_eps__vipdeng_t batt_input; /*!< Input V, I and P data taken at the input of the battery part of the unit in raw form. Negative values indicate output flow. */
		uint16_t stat_obc_on; /*!< Bitflag field indicating channel-on status for the output bus channels. */
		uint16_t stat_obc_ocf; /*!< Bitflag field indicating overcurrent latch-off fault status for the output bus channels. */
		uint16_t bat_stat; /*!< Bitflag field indicating BP board */
		int16_t temp2; /*!< 2 and 4 cell battery pack: Battery pack temperature in between the center battery cells. */
		int16_t temp3; /*!< 2 cell battery pack: not used 4 cell battery pack: Battery pack temperature on the front of the battery pack. */
		int16_t volt_vd0; /*!< Voltage of voltage domain 0 */
		int16_t volt_vd1; /*!< Voltage of voltage domain 0 */
		int16_t volt_vd2; /*!< Voltage of voltage domain 0 */
		isis_eps__vipdeng_t vip_obc00; /*!< Output V, I and P of output bus channel */
		isis_eps__vipdeng_t vip_obc01; /*!< Output V, I and P of output bus channel */
		isis_eps__vipdeng_t vip_obc02; /*!< Output V, I and P of output bus channel */
		isis_eps__vipdeng_t vip_obc03; /*!< Output V, I and P of output bus channel */
		isis_eps__vipdeng_t vip_obc04; /*!< Output V, I and P of output bus channel */
		isis_eps__vipdeng_t vip_obc05; /*!< Output V, I and P of output bus channel */
		isis_eps__vipdeng_t vip_obc06; /*!< Output V, I and P of output bus channel */
		isis_eps__vipdeng_t vip_obc07; /*!< Output V, I and P of output bus channel */
		isis_eps__vipdeng_t vip_obc08; /*!< Output V, I and P of output bus channel */
		isis_eps__ccsdeng_t cc1; /*!< Data on conditioning chain */
		isis_eps__ccsdeng_t cc2; /*!< Data on conditioning chain */
		isis_eps__ccsdeng_t cc3; /*!< Data on conditioning chain */
	} fields;
} isis_eps__gethousekeepingeng__from_t;
	
/*!
 * Union for storing the parameters received by GetHousekeepingEngIncDB Tm.
 */
typedef union __attribute__ ((__packed__)) _isis_eps__gethousekeepingengincdb__from_t 
{
	unsigned char raw[174];
	struct __attribute__ ((__packed__))
	{
		isis_eps__replyheader_t reply_header; /*!< "See \""System Type Identifier (STID)\"" (page 22)" */
		uint8_t reserved; /*!< reserved */
		int16_t volt_brdsup; /*!< Voltage of internal board supply in raw form */
		int16_t temp; /*!< Measured temperature provided by a sensor internal to the MCU in raw form */
		isis_eps__vipdeng_t dist_input; /*!< Input V, I and P data taken at the input of the distribution part of the unit in raw form. Negative values indicate output flow. */
		isis_eps__vipdeng_t batt_input; /*!< Input V, I and P data taken at the input of the battery part of the unit in raw form. Negative values indicate output flow. */
		uint16_t stat_obc_on; /*!< Bitflag field indicating channel-on status for the output bus channels. */
		uint16_t stat_obc_ocf; /*!< Bitflag field indicating overcurrent latch-off fault status for the output bus channels. */
		uint16_t bat_stat; /*!< Bitflag field indicating BP board */
		int16_t temp2; /*!< 2 and 4 cell battery pack: Battery pack temperature in between the center battery cells. */
		int16_t temp3; /*!< 2 cell battery pack: not used 4 cell battery pack: Battery pack temperature on the front of the battery pack. */
		int16_t volt_vd0; /*!< Voltage of voltage domain 0 */
		int16_t volt_vd1; /*!< Voltage of voltage domain 0 */
		int16_t volt_vd2; /*!< Voltage of voltage domain 0 */
		isis_eps__vipdeng_t vip_obc00; /*!< Output V, I and P of output bus channel */
		isis_eps__vipdeng_t vip_obc01; /*!< Output V, I and P of output bus channel */
		isis_eps__vipdeng_t vip_obc02; /*!< Output V, I and P of output bus channel */
		isis_eps__vipdeng_t vip_obc03; /*!< Output V, I and P of output bus channel */
		isis_eps__vipdeng_t vip_obc04; /*!< Output V, I and P of output bus channel */
		isis_eps__vipdeng_t vip_obc05; /*!< Output V, I and P of output bus channel */
		isis_eps__vipdeng_t vip_obc06; /*!< Output V, I and P of output bus channel */
		isis_eps__vipdeng_t vip_obc07; /*!< Output V, I and P of output bus channel */
		isis_eps__vipdeng_t vip_obc08; /*!< Output V, I and P of output bus channel */
		isis_eps__ccsdeng_t cc1; /*!< Data on conditioning chain */
		isis_eps__ccsdeng_t cc2; /*!< Data on conditioning chain */
		isis_eps__ccsdeng_t cc3; /*!< Data on conditioning chain */
		isis_eps__vipdeng_t vip_obc09; /*!< Output V, I and P of output bus channel */
		isis_eps__vipdeng_t vip_obc10; /*!< Output V, I and P of output bus channel */
		isis_eps__vipdeng_t vip_obc11; /*!< Output V, I and P of output bus channel */
		isis_eps__vipdeng_t vip_obc12; /*!< Output V, I and P of output bus channel */
		isis_eps__vipdeng_t vip_obc13; /*!< Output V, I and P of output bus channel */
		isis_eps__vipdeng_t vip_obc14; /*!< Output V, I and P of output bus channel */
		isis_eps__vipdeng_t vip_obc15; /*!< Output V, I and P of output bus channel */
		isis_eps__ccsdeng_t cc4; /*!< Data on conditioning chain */
		isis_eps__ccsdeng_t cc5; /*!< Data on conditioning chain */
	} fields;
} isis_eps__gethousekeepingengincdb__from_t;
	
/*!
 * Union for storing the parameters received by GetHousekeepingRunningAvg Tm.
 */
typedef union __attribute__ ((__packed__)) _isis_eps__gethousekeepingrunningavg__from_t 
{
	unsigned char raw[116];
	struct __attribute__ ((__packed__))
	{
		isis_eps__replyheader_t reply_header; /*!< "See \""System Type Identifier (STID)\"" (page 22)" */
		uint8_t reserved; /*!< reserved */
		int16_t volt_brdsup; /*!< Voltage of internal board supply in raw form */
		int16_t temp; /*!< Measured temperature provided by a sensor internal to the MCU in raw form */
		isis_eps__vipdeng_t dist_input; /*!< Input V, I and P data taken at the input of the distribution part of the unit in raw form. Negative values indicate output flow. */
		isis_eps__vipdeng_t batt_input; /*!< Input V, I and P data taken at the input of the battery part of the unit in raw form. Negative values indicate output flow. */
		uint16_t stat_obc_on; /*!< Bitflag field indicating channel-on status for the output bus channels. */
		uint16_t stat_obc_ocf; /*!< Bitflag field indicating overcurrent latch-off fault status for the output bus channels. */
		uint16_t bat_stat; /*!< Bitflag field indicating BP board */
		int16_t temp2; /*!< 2 and 4 cell battery pack: Battery pack temperature in between the center battery cells. */
		int16_t temp3; /*!< 2 cell battery pack: not used 4 cell battery pack: Battery pack temperature on the front of the battery pack. */
		int16_t volt_vd0; /*!< Voltage of voltage domain 0 */
		int16_t volt_vd1; /*!< Voltage of voltage domain 0 */
		int16_t volt_vd2; /*!< Voltage of voltage domain 0 */
		isis_eps__vipdeng_t vip_obc00; /*!< Output V, I and P of output bus channel */
		isis_eps__vipdeng_t vip_obc01; /*!< Output V, I and P of output bus channel */
		isis_eps__vipdeng_t vip_obc02; /*!< Output V, I and P of output bus channel */
		isis_eps__vipdeng_t vip_obc03; /*!< Output V, I and P of output bus channel */
		isis_eps__vipdeng_t vip_obc04; /*!< Output V, I and P of output bus channel */
		isis_eps__vipdeng_t vip_obc05; /*!< Output V, I and P of output bus channel */
		isis_eps__vipdeng_t vip_obc06; /*!< Output V, I and P of output bus channel */
		isis_eps__vipdeng_t vip_obc07; /*!< Output V, I and P of output bus channel */
		isis_eps__vipdeng_t vip_obc08; /*!< Output V, I and P of output bus channel */
		isis_eps__ccsdeng_t cc1; /*!< Data on conditioning chain */
		isis_eps__ccsdeng_t cc2; /*!< Data on conditioning chain */
		isis_eps__ccsdeng_t cc3; /*!< Data on conditioning chain */
	} fields;
} isis_eps__gethousekeepingrunningavg__from_t;
	
/*!
 * Union for storing the parameters received by GetHousekeepingEngRunningAvgIncDB Tm.
 */
typedef union __attribute__ ((__packed__)) _isis_eps__gethousekeepingengrunningavgincdb__from_t 
{
	unsigned char raw[174];
	struct __attribute__ ((__packed__))
	{
		isis_eps__replyheader_t reply_header; /*!< "See \""System Type Identifier (STID)\"" (page 22)" */
		uint8_t reserved; /*!< reserved */
		int16_t volt_brdsup; /*!< Voltage of internal board supply in raw form */
		int16_t temp; /*!< Measured temperature provided by a sensor internal to the MCU in raw form */
		isis_eps__vipdeng_t dist_input; /*!< Input V, I and P data taken at the input of the distribution part of the unit in raw form. Negative values indicate output flow. */
		isis_eps__vipdeng_t batt_input; /*!< Input V, I and P data taken at the input of the battery part of the unit in raw form. Negative values indicate output flow. */
		uint16_t stat_obc_on; /*!< Bitflag field indicating channel-on status for the output bus channels. */
		uint16_t stat_obc_ocf; /*!< Bitflag field indicating overcurrent latch-off fault status for the output bus channels. */
		uint16_t bat_stat; /*!< Bitflag field indicating BP board */
		int16_t temp2; /*!< 2 and 4 cell battery pack: Battery pack temperature in between the center battery cells. */
		int16_t temp3; /*!< 2 cell battery pack: not used 4 cell battery pack: Battery pack temperature on the front of the battery pack. */
		int16_t volt_vd0; /*!< Voltage of voltage domain 0 */
		int16_t volt_vd1; /*!< Voltage of voltage domain 0 */
		int16_t volt_vd2; /*!< Voltage of voltage domain 0 */
		isis_eps__vipdeng_t vip_obc00; /*!< Output V, I and P of output bus channel */
		isis_eps__vipdeng_t vip_obc01; /*!< Output V, I and P of output bus channel */
		isis_eps__vipdeng_t vip_obc02; /*!< Output V, I and P of output bus channel */
		isis_eps__vipdeng_t vip_obc03; /*!< Output V, I and P of output bus channel */
		isis_eps__vipdeng_t vip_obc04; /*!< Output V, I and P of output bus channel */
		isis_eps__vipdeng_t vip_obc05; /*!< Output V, I and P of output bus channel */
		isis_eps__vipdeng_t vip_obc06; /*!< Output V, I and P of output bus channel */
		isis_eps__vipdeng_t vip_obc07; /*!< Output V, I and P of output bus channel */
		isis_eps__vipdeng_t vip_obc08; /*!< Output V, I and P of output bus channel */
		isis_eps__ccsdeng_t cc1; /*!< Data on conditioning chain */
		isis_eps__ccsdeng_t cc2; /*!< Data on conditioning chain */
		isis_eps__ccsdeng_t cc3; /*!< Data on conditioning chain */
		isis_eps__vipdeng_t vip_obc09; /*!< Output V, I and P of output bus channel */
		isis_eps__vipdeng_t vip_obc10; /*!< Output V, I and P of output bus channel */
		isis_eps__vipdeng_t vip_obc11; /*!< Output V, I and P of output bus channel */
		isis_eps__vipdeng_t vip_obc12; /*!< Output V, I and P of output bus channel */
		isis_eps__vipdeng_t vip_obc13; /*!< Output V, I and P of output bus channel */
		isis_eps__vipdeng_t vip_obc14; /*!< Output V, I and P of output bus channel */
		isis_eps__vipdeng_t vip_obc15; /*!< Output V, I and P of output bus channel */
		isis_eps__ccsdeng_t cc4; /*!< Data on conditioning chain */
		isis_eps__ccsdeng_t cc5; /*!< Data on conditioning chain */
	} fields;
} isis_eps__gethousekeepingengrunningavgincdb__from_t;
	

/* PROTOTYPES */

/*!
 *	Initialize ISIS_EPS instances
 *
 *	@param[in] Pointer to array of ISIS_EPS instances.
 *	@param[in] Count of ISIS_EPS instances.
 * 	@return ISIS_EPS_ERR_t
 */
int ISIS_EPS_Init( ISIS_EPS_t* isis_eps, uint8_t isis_epsCount );

/*!
 *	Perform a software induced reset of the MCU.
 *
 *	@param [in] Parameters sent to subsystem.
  *	@param [out] Response received from subsystem.
 * 	@return ISIS_EPS_ERR_t
 */
int isis_eps__reset__tmtc( uint8_t index, isis_eps__reset__to_t *params , isis_eps__reset__from_t *response );

/*!
 *	Performs a no-operation. This is useful to check the availability of the system, without changing anything about the current configuration or operation.
 *
 *	@param [out] Response received from subsystem.
 * 	@return ISIS_EPS_ERR_t
 */
int isis_eps__nop__tm( uint8_t index, isis_eps__nop__from_t *response );

/*!
 *	Cancels any ongoing drive command and stops the motors.
 *
 *	@param [out] Response received from subsystem.
 * 	@return ISIS_EPS_ERR_t
 */
int isis_eps__cancel__tm( uint8_t index, isis_eps__cancel__from_t *response );

/*!
 *	Resets the watchdog timer keeping the system from performing a reset.
 *
 *	@param [out] Response received from subsystem.
 * 	@return ISIS_EPS_ERR_t
 */
int isis_eps__watchdog__tm( uint8_t index, isis_eps__watchdog__from_t *response );

/*!
 *	Turn-on output bus channels that are marked with a 1-bit, leave bus channels that are not marked unaltered. The least-significant bit corresponds to bus channel 0 (OBC0), the next bit corresponds to channel 1 (OBC1), etc.
 *
 *	@param [in] Parameters sent to subsystem.
  *	@param [out] Response received from subsystem.
 * 	@return ISIS_EPS_ERR_t
 */
int isis_eps__outputbusgroupon__tmtc( uint8_t index, isis_eps__outputbusgroupon__to_t *params , isis_eps__outputbusgroupon__from_t *response );

/*!
 *	Turn-off output bus channels that are marked with a 1-bit, leave bus channels that are not marked unaltered. The least-significant bit corresponds to bus channel 0 (OBC0), the next bit corresponds to channel 1 (OBC1), etc.
 *
 *	@param [in] Parameters sent to subsystem.
  *	@param [out] Response received from subsystem.
 * 	@return ISIS_EPS_ERR_t
 */
int isis_eps__outputbusgroupoff__tmtc( uint8_t index, isis_eps__outputbusgroupoff__to_t *params , isis_eps__outputbusgroupoff__from_t *response );

/*!
 *	Turn-on bus channels that are marked with a 1-bit, turn-off bus channels that are not marked (i.e. 0-bit). The least-significant bit corresponds to bus channel 0 (OBC00), the next bit corresponds to channel 1 (OBC01), etc.
 *
 *	@param [in] Parameters sent to subsystem.
  *	@param [out] Response received from subsystem.
 * 	@return ISIS_EPS_ERR_t
 */
int isis_eps__outputbusgroupstate__tmtc( uint8_t index, isis_eps__outputbusgroupstate__to_t *params , isis_eps__outputbusgroupstate__from_t *response );

/*!
 *	Turn a single output bus channel on using the bus channel index. Index 0 represents channel 0 (OBC0), index 1 represents channel 1 (OBC1), etc.
 *
 *	@param [in] Parameters sent to subsystem.
  *	@param [out] Response received from subsystem.
 * 	@return ISIS_EPS_ERR_t
 */
int isis_eps__outputbuschannelon__tmtc( uint8_t index, isis_eps__outputbuschannelon__to_t *params , isis_eps__outputbuschannelon__from_t *response );

/*!
 *	Turn a single output bus channel off using the bus channel index. Index 0 represents channel 0 (OBC0), index 1 represents channel 1 (OBC1), etc.
 *
 *	@param [in] Parameters sent to subsystem.
  *	@param [out] Response received from subsystem.
 * 	@return ISIS_EPS_ERR_t
 */
int isis_eps__outputbuschanneloff__tmtc( uint8_t index, isis_eps__outputbuschanneloff__to_t *params , isis_eps__outputbuschanneloff__from_t *response );

/*!
 *	TBD
 *
 *	@param [out] Response received from subsystem.
 * 	@return ISIS_EPS_ERR_t
 */
int isis_eps__switchtonominal__tm( uint8_t index, isis_eps__switchtonominal__from_t *response );

/*!
 *	TBD
 *
 *	@param [out] Response received from subsystem.
 * 	@return ISIS_EPS_ERR_t
 */
int isis_eps__switchtosafety__tm( uint8_t index, isis_eps__switchtosafety__from_t *response );

/*!
 *	Return system status information
 *
 *	@param [out] Response received from subsystem.
 * 	@return ISIS_EPS_ERR_t
 */
int isis_eps__getsystemstatus__tm( uint8_t index, isis_eps__getsystemstatus__from_t *response );

/*!
 *	Prepare the response buffer with output bus over current events. Over current fault counters are incremented each time a bus is latched off due to an overcurrent event.
 *
 *	@param [out] Response received from subsystem.
 * 	@return ISIS_EPS_ERR_t
 */
int isis_eps__getovercurrentfaultstate__tm( uint8_t index, isis_eps__getovercurrentfaultstate__from_t *response );

/*!
 *	Get the value of a configuration parameter.
 *
 *	@param [in] Parameters sent to subsystem.
  *	@param [out] Response received from subsystem.
 * 	@return ISIS_EPS_ERR_t
 */
int isis_eps__getparameter__tmtc( uint8_t index, isis_eps__getparameter__to_t *params , isis_eps__getparameter__from_t *response );

/*!
 *	Change a configuration parameter. The change will take effect immediately and any function using the parameter will use the new value
 *
 *	@param [in] Parameters sent to subsystem.
  *	@param [out] Response received from subsystem.
 * 	@return ISIS_EPS_ERR_t
 */
int isis_eps__setparameter__tmtc( uint8_t index, isis_eps__setparameter__to_t *params , isis_eps__setparameter__from_t *response );

/*!
 *	Reset a parameter to its default hard-coded value. All parameters have this value at system power-up or after the software reset command.
 *
 *	@param [in] Parameters sent to subsystem.
  *	@param [out] Response received from subsystem.
 * 	@return ISIS_EPS_ERR_t
 */
int isis_eps__resetparameter__tmtc( uint8_t index, isis_eps__resetparameter__to_t *params , isis_eps__resetparameter__from_t *response );

/*!
 *	Reset all configuration parameters to hard-coded defaults, discarding any changes made, in volatile memory (only!). This is performed automatically at system startup before an attempt to load a configuration is performed. If no (valid) configuration is found that can be loaded, the system will use hard coded defaults.
 *
 *	@param [in] Parameters sent to subsystem.
  *	@param [out] Response received from subsystem.
 * 	@return ISIS_EPS_ERR_t
 */
int isis_eps__resetall__tmtc( uint8_t index, isis_eps__resetall__to_t *params , isis_eps__resetall__from_t *response );

/*!
 *	Load all configuration parameters from non-volatile memory, discarding any changes made in volatile memory. This is performed automatically at system startup if a valid load configuration is encountered in non-volatile memory. If no (valid) configuration is found, the system will initialize using hard coded defaults.
 *
 *	@param [in] Parameters sent to subsystem.
  *	@param [out] Response received from subsystem.
 * 	@return ISIS_EPS_ERR_t
 */
int isis_eps__loadall__tmtc( uint8_t index, isis_eps__loadall__to_t *params , isis_eps__loadall__from_t *response );

/*!
 *	Commit all read/write configuration parameters kept in volatile memory to non-volatile memory.
 *
 *	@param [in] Parameters sent to subsystem.
  *	@param [out] Response received from subsystem.
 * 	@return ISIS_EPS_ERR_t
 */
int isis_eps__saveall__tmtc( uint8_t index, isis_eps__saveall__to_t *params , isis_eps__saveall__from_t *response );

/*!
 *	Prepare the response buffer with housekeeping data. The housekeeping data is returned in raw form, as received from the hardware, unaltered by the main controller.
 *
 *	@param [out] Response received from subsystem.
 * 	@return ISIS_EPS_ERR_t
 */
int isis_eps__gethousekeepingraw__tm( uint8_t index, isis_eps__gethousekeepingraw__from_t *response );

/*!
 *	Prepare the response buffer with housekeeping data. The housekeeping data is returned in raw form, as received from the hardware, unaltered by the main controller.
 *
 *	@param [out] Response received from subsystem.
 * 	@return ISIS_EPS_ERR_t
 */
int isis_eps__gethousekeepingrawincdb__tm( uint8_t index, isis_eps__gethousekeepingrawincdb__from_t *response );

/*!
 *	Prepare the response buffer with housekeeping data. The housekeeping data is returned in engineering values.
 *
 *	@param [out] Response received from subsystem.
 * 	@return ISIS_EPS_ERR_t
 */
int isis_eps__gethousekeepingeng__tm( uint8_t index, isis_eps__gethousekeepingeng__from_t *response );

/*!
 *	Prepare the response buffer with housekeeping data. The housekeeping data is returned in raw form, as received from the hardware, unaltered by the main controller.
 *
 *	@param [out] Response received from subsystem.
 * 	@return ISIS_EPS_ERR_t
 */
int isis_eps__gethousekeepingengincdb__tm( uint8_t index, isis_eps__gethousekeepingengincdb__from_t *response );

/*!
 *	Prepare the response buffer with running average housekeeping data. The housekeeping data is returned in engineering values.
 *
 *	@param [out] Response received from subsystem.
 * 	@return ISIS_EPS_ERR_t
 */
int isis_eps__gethousekeepingrunningavg__tm( uint8_t index, isis_eps__gethousekeepingrunningavg__from_t *response );

/*!
 *	Prepare the response buffer with running average housekeeping data. The housekeeping data is returned in engineering values.
 *
 *	@param [out] Response received from subsystem.
 * 	@return ISIS_EPS_ERR_t
 */
int isis_eps__gethousekeepingengrunningavgincdb__tm( uint8_t index, isis_eps__gethousekeepingengrunningavgincdb__from_t *response );


#endif /* ISIS_EPS_H_ */

