/* Automatically generated nanopb header */
/* Generated by nanopb-0.4.4 */

#ifndef PB_RPROTOCOL_PB_H_INCLUDED
#define PB_RPROTOCOL_PB_H_INCLUDED
#include <pb.h>

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Struct definitions */
typedef struct _Ack {
    char dummy_field;
} Ack;

typedef struct _Nack {
    char dummy_field;
} Nack;

typedef struct _ProtocolMessage {
    pb_size_t which_message;
    union {
        Ack ack;
        Nack nack;
    };
} ProtocolMessage;


#ifdef __cplusplus
extern "C" {
#endif

/* Initializer values for message structs */
#define ProtocolMessage_init_default             {0, {Ack_init_default}}
#define Ack_init_default                         {0}
#define Nack_init_default                        {0}
#define ProtocolMessage_init_zero                {0, {Ack_init_zero}}
#define Ack_init_zero                            {0}
#define Nack_init_zero                           {0}

/* Field tags (for use in manual encoding/decoding) */
#define ProtocolMessage_ack_tag                  1
#define ProtocolMessage_nack_tag                 2

/* Struct field encoding specification for nanopb */
#define ProtocolMessage_FIELDLIST(X, a) \
X(a, STATIC,   ONEOF,    MESSAGE,  (message,ack,ack),   1) \
X(a, STATIC,   ONEOF,    MESSAGE,  (message,nack,nack),   2)
#define ProtocolMessage_CALLBACK NULL
#define ProtocolMessage_DEFAULT NULL
#define ProtocolMessage_message_ack_MSGTYPE Ack
#define ProtocolMessage_message_nack_MSGTYPE Nack

#define Ack_FIELDLIST(X, a) \

#define Ack_CALLBACK NULL
#define Ack_DEFAULT NULL

#define Nack_FIELDLIST(X, a) \

#define Nack_CALLBACK NULL
#define Nack_DEFAULT NULL

extern const pb_msgdesc_t ProtocolMessage_msg;
extern const pb_msgdesc_t Ack_msg;
extern const pb_msgdesc_t Nack_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define ProtocolMessage_fields &ProtocolMessage_msg
#define Ack_fields &Ack_msg
#define Nack_fields &Nack_msg

/* Maximum encoded size of messages (where known) */
#define ProtocolMessage_size                     2
#define Ack_size                                 0
#define Nack_size                                0

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
